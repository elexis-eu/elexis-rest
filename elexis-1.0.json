{
    "info": {
        "version": "1.0",
        "title": "ELEXIS Protocol for accessing dictionaries",
        "description": "This protocol allows data to be shared with the ELEXIS platform and should be implemented by all providers of data to the ELEXIS platform. This is an OpenAPI documentation, for more details about using this specification, please refer to OpenAPI documentations: https://swagger.io/resources/articles/documenting-apis-with-swagger/",
        "contact": {
            "name": "ELEXIS Project",
            "url": "https://elex.is/"
        },
        "license": {
            "name": "Public Domain",
            "url": "https://creativecommons.org/publicdomain/zero/1.0/"
        },
        "x-logo": {
            "url": "logo.jpeg",
            "altText": "ELEXIS European Lexicographic Infrasturcture"
        }
    }, 
    "paths": {
        "/dictionaries": {
            "get": {
                "summary": "Get dictionaries",
                "description": "List all of the dictionaries that are available at this endpoint",
                "parameters": [{
                    "required": false,
                    "in": "header",
                    "name": "X-API-KEY",
                    "schema": { "type": "string" },
                    "description": "An API key to authorize access to this endpoint if necessary"
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "dictionaries": {
                                            "type": "array",
                                            "description": "An array of identifiers for dictionaries",
                                            "minItems": 1,
                                            "uniqueItems": true,
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": ["dict1","dict2"]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "500": { 
                        "$ref": "#/components/responses/server_error"
                    }
                },
                "operationId": "dictionaries"
            }
        },
        "/about/{dictionary}": {
            "get": {
                "summary": "About the dictionary",
                "description": "Get the metadata about the dictionary, including the conditions under which it can be included in the Dictionary Matrix",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "dictionary",
                        "description": "Identifier of the dictionary to describe",
                        "schema": {
                            "type": "string"
                        }
                    }, {
                        "required": false,
                        "in": "header",
                        "name": "X-API-KEY",
                        "schema": { "type": "string" },
                        "description": "An API key to authorize access to this endpoint if necessary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/metadata"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Dictionary not found (identifier not known)"
                    },
                    "403": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/server_error"
                    }
                },
                "operationId": "about"
            }
        },
        "/list/{dictionary}": {
            "get": {
                "summary": "Get all lemmas",
                "description": "Get all of the entries contained within this dictionary",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "dictionary",
                        "description": "The identifier of the dictionary to list",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "The maximum number of entries to return",
                        "schema": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }, 
                    {
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "The offset (index of first entry) to return",
                        "schema": {
                            "default": 0, 
                            "minimum": 0, 
                            "type": "integer"
                        }
                    }, {
                        "required": false,
                        "in": "header",
                        "name": "X-API-KEY",
                        "schema": { "type": "string" },
                        "description": "An API key to authorize access to this endpoint if necessary"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/entry"
                                    }, 
                                    "type": "array"
                                }
                            }
                        }, 
                        "description": "The entries matching with this lemma"
                    },
                    "404": {
                        "description": "Dictionary not found (identifier not known)"
                    },
                    "403": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/server_error"
                    }
                },
                 "operationId": "getAll"
            }
        },
       "/lemma/{dictionary}/{headword}": {
            "get": {
                "summary": "Headword lookup",
                "description": "Given a headword, find all the entries that are listed under this headword",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "dictionary",
                        "description": "The identifier of the dictionary containing the entries",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "required": true, 
                        "in": "path", 
                        "name": "headword", 
                        "description": "The lemma of the headword to lookup",
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    {
                        "required": false, 
                        "in": "query", 
                        "name": "partOfSpeech", 
                        "description": "A part of speech tag that the entry has, this must be one of the value from the Universal Part-of-Speech Tagset (http://universaldependencies.org/u/pos/)",
                        "schema": {
                            "enum": [
                                "ADJ", 
                                "ADP", 
                                "ADV", 
                                "AUX", 
                                "CCONJ", 
                                "DET", 
                                "INTJ", 
                                "NOUN", 
                                "NUM", 
                                "PART", 
                                "PRON", 
                                "PROPN", 
                                "PUNCT", 
                                "SCONJ", 
                                "SYM", 
                                "VERB", 
                                "X"
                            ], 
                            "type": "string"
                        }
                    }, 
                    {
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "The maximum number of entries to return",
                        "schema": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }, 
                    {
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "The offset (index of first entry) to return",
                        "schema": {
                            "default": 0, 
                            "minimum": 0, 
                            "type": "integer"
                        }
                    }, 
                    {
                        "required": false, 
                        "in": "query",
                        "name": "inflected", 
                        "description": "If true treat the query as an inflected form and return all lemmas that may be a form of this query",
                        "schema": {
                            "default": false, 
                            "type": "boolean"
                        }
                    }, {
                        "required": false,
                        "in": "header",
                        "name": "X-API-KEY",
                        "schema": { "type": "string" },
                        "description": "An API key to authorize access to this endpoint if necessary"
                    }
                ], 
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/entry"
                                    }, 
                                    "type": "array"
                                }
                            }
                        }, 
                        "description": "The entries matching with this query"
                    },
                    "403": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "description": "Dictionary not found (identifier not known)"
                    },
                    "500": {
                        "$ref": "#/components/responses/server_error"
                    }
                 }, 
                 "operationId": "getByLemma"
            }
        }, 
        "/json/{dictionary}/{id}": {
            "get": {
                "summary": "Entry as JSON",
                "description": "Return the Entry directly as a JSON document. Services must implement at least one of the `/json`, `/ontolex` or `/tei` actions.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ontolex_entry"
                                }
                            }
                        },
                        "description": "Success",
                        "headers": {
                            "last-modified": {
                                "name": "Last-Modified",
                                "description": "When this entry was last modified, formatted according to https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified"
                            }
                        }
                    },
                    "301": {
                        "description": "ID Updated (this entry has changed its ID)"
                    },
                    "403": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "description": "No Entry Availble (the dictionary or entry ID is not known or the entry has been deleted)"
                    },
                    "500": {
                        "$ref": "#/components/responses/server_error"
                    }
 
                }, 
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "dictionary",
                        "description": "The identifier of the dictionary containing the entry",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "required": true, 
                        "in": "path", 
                        "name": "id", 
                        "description": "The identifier of the entry",
                        "schema": {
                            "type": "string"
                        }
                    }, {
                        "required": false,
                        "in": "header",
                        "name": "X-API-KEY",
                        "schema": { "type": "string" },
                        "description": "An API key to authorize access to this endpoint if necessary"
                    }
                ], 
                "operationId": "getEntryById"
            }
        }, 
        "/ontolex/{dictionary}/{id}": {
            "get": {
                "summary": "Entry as Turtle",
                "description": "Return the dictionary entry as an RDF Turtle Document. Services must implement at least one of the `/json`, `/tei` or `/ontolex` actions.",
                "responses": {
                    "200": {
                        "content": {
                            "text/turtle": {
                                "example": "@prefix ontolex: @prefix ontolex: <http://www.w3.org/ns/lemon/ontolex#> .\n@prefix lexinfo: <http://lexinfo.net/ontology/3.0/lexinfo/>.\n@prefix skos: <http://www.w3.org/2004/02/skos/core# >\n\n<> a ontolex:LexicalEntry\n  ontolex:canonicalForm [\n  ontolex:writtenRep \"example\"@en ] ;\n  lexinfo:partOfSpeech lexinfo:commonNoun ;\n  ontolex:denotes [\n    skos:definition \"An example OntoLex Entry\"@en ] ."
                            }
                        }, 
                        "description": "Success",
                        "headers": {
                            "last-modified": {
                                "name": "Last-Modified",
                                "description": "When this entry was last modified, formatted according to https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified"
                            }
                        }
                    },
                    "301": {
                        "description": "ID Updated (this entry has changed its ID)"
                    },
                    "403": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "description": "No Entry Availble (the dictionary or entry ID is not known or the entry has been deleted)"
                    },
                    "500": {
                        "$ref": "#/components/responses/server_error"
                    }
 
                }, 
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "dictionary",
                        "description": "The dictionary containing the entry",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "required": true, 
                        "in": "path", 
                        "name": "id", 
                        "schema": {
                            "type": "string"
                        }
                    }, {
                        "required": false,
                        "in": "header",
                        "name": "X-API-KEY",
                        "schema": { "type": "string" },
                        "description": "An API key to authorize access to this endpoint if necessary"
                    }
                ], 
                "operationId": "getEntryAsOntoLexById"
            }
        },
        "/tei/{dictionary}/{id}": {
            "get": {
                "summary": "Entry XML",
                "description": "Return the TEI-Lex0 representation of the document. Services must implement at least one of the `/ontolex`, `/json` or `/tei` actions.",
                "responses": {
                    "200": {
                        "content": {
                            "text/xml": {
                                    "example": "<entry xml:id=\"id\">\n  <form type=\"lemma\"><orth>example</orth></form>\n  <gramGrp>\n    <pos norm=\"NN\">noun</pos>\n  </gramGrp>\n  <sense n=\"1\">\n    <def>An example TEI-Lex0 Entry</def>\n  </sense>\n</entry>",
                                "schema": {
                                    "description": "A TEI-Lex0 document, see description TBD",
                                    "example": "<entry xml:id=\"foo\"></entry>"
                                }
                            }
                        }, 
                        "description": "Success",
                        "headers": {
                            "last-modified": {
                                "name": "Last-Modified",
                                "description": "When this entry was last modified, formatted according to https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified"
                            }
                        }
                    },
                    "301": {
                        "description": "ID Updated (this entry has changed its ID)"
                    },
                    "403": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "description": "No Entry Availble (the dictionary or entry ID is not known or the entry has been deleted)"
                    },
                    "500": {
                        "$ref": "#/components/responses/server_error"
                    }
 
                }, 
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "dictionary",
                        "description": "The dictionary containing the entry",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "required": true, 
                        "in": "path", 
                        "name": "id", 
                        "schema": {
                            "type": "string"
                        }
                    }, {
                        "required": false,
                        "in": "header",
                        "name": "X-API-KEY",
                        "schema": { "type": "string" },
                        "description": "An API key to authorize access to this endpoint if necessary"
                    }
                ], 
                "operationId": "getEntryAsTEIById"
            }
        } 
    }, 
    "components": {
        "schemas": {
            "entry": {
                "properties": {
                    "release": {
                        "description": "The conditions under which this entry can be included in the ELEXIS Matrix Dictionary",
                        "enum": [
                            "PUBLIC", 
                            "NONCOMMERCIAL", 
                            "RESEARCH", 
                            "PRIVATE"
                        ], 
                        "type": "string"
                    }, 
                    "lemma": {
                        "description": "The lemma of this identifier",
                        "type": "string"
                    }, 
                    "language": {
                        "description": "A language code following the ISO 639-1,2,3 standard. If a (two-letter) ISO 639-1 code exists this should be used in preference",
                        "pattern": "\\w{2,3}", 
                        "type": "string",
                        "example": "en"
                    }, 
                    "id": {
                        "description": "A unique identifier for the entry",
                        "type": "string"
                    }, 
                    "partOfSpeech": {
                        "type": "array",
                        "description": "A part of speech tag that the entry has, this must be one of the value from the Universal Part-of-Speech Tagset (http://universaldependencies.org/u/pos/)",
                        "minItems": 1,
                        "uniqueItems": true,
                        "items": {
                            "enum": [
                                "ADJ", 
                                "ADP", 
                                "ADV", 
                                "AUX", 
                                "CCONJ", 
                                "DET", 
                                "INTJ", 
                                "NOUN", 
                                "NUM", 
                                "PART", 
                                "PRON", 
                                "PROPN", 
                                "PUNCT", 
                                "SCONJ", 
                                "SYM", 
                                "VERB", 
                                "X"
                            ], 
                            "type": "string"
                        }
                    },
                    "formats": {
                        "type": "array",
                        "description": "The formats that this resource is available in. They are as follows\n - `tei`: This document is available as TEI-Lex0 from the `/tei` path\n - `json`: This document is available as OntoLex-Lemon in JSON-LD markup from the `/json` path\n - `ontolex`: The document is available as OntoLex-Lemon in Turtle from the `/ontolex` path",
                        "minItems": 1,
                        "uniqueItems": true,
                        "items": {
                            "enum": [
                                "tei",
                                "json",
                                "ontolex"
                            ],
                            "type": "string"
                        }
                    }
                }, 
                "type": "object",
                "required": ["release", "lemma", "id"]
            }, 
            "agent": {
                "type": "object",
                "description": "Examples of Agent include person, organization, and software agent.",
                "properties": {
                    "name": {
                        "description": "The name of the agent",
                        "type": "string",
                        "example": "Joe Bloggs"
                    },
                    "email": {
                        "description": "The email address of an agent",
                        "type": "string",
                        "pattern": ".*@.*",
                        "example": "joe.bloggs@example.com"
                    },
                    "url": {
                        "description": "The URL pointing to contact information",
                        "type": "string",
                        "pattern": "https?://.*",
                        "example": "http://elex.is"
                    }
                }
            },
            "agent-class": {
                "type": "object",
                "description": "Examples of Agent Class include groups seen as classes, such as students, women, charities, lecturers.",
                "properties": {
                    "name": {
                        "description": "The name of the agent class",
                        "type": "string",
                        "example": "Students"
                    }
                }
            },
            "metadata": {
                "type": "object", 
                "example": {
                    "release": "PUBLIC",
                    "sourceLanguage": "en",
                    "targetLanguage": [
                        "en",
                        "de"
                    ],
                    "genre": [
                        "gen"
                    ],
                    "license": "https://creativecommons.org/licenses/by/4.0/",
                    "title": "The Human-Readable Name of this resource",
                    "creator": [
                        {
                            "name": "Institute of This Resource",
                            "email": "contact@institute.com"
                        }
                    ],
                    "publisher": [
                        {
                            "name": "Publishing Company"
                        }
                    ]
                },
                "properties": {
                    "release": {
                        "description": "The conditions under which this dictionary (or data from this dictionary) can be included in the ELEXIS Matrix Dictionary",
                        "enum": [
                            "PUBLIC", 
                            "NONCOMMERCIAL", 
                            "RESEARCH", 
                            "PRIVATE"
                        ], 
                        "type": "string"
                    }, 
                    "sourceLanguage": {
                        "type": "string",
                        "description": "The language of the lemmas in the dictionary, as an ISO 639-1,2,3 code. If a (two-letter) ISO 639-1 code exists this should be used in preference",
                        "pattern": "\\w{2,3}", 
                        "example": "en"
                    },
                    "targetLanguage": {
                        "type": "array",
                        "description": "The languages of the entries in the dictionary, can be identical to the source language or another language (for example in a bilingual dictionary).",
                        "minItems": 1,
                        "uniqueItems": true,
                        "items": {
                            "description": "A language code following the ISO 639-1,2,3 standard. If a (two-letter) ISO 639-1 code exists this should be used in preference",
                            "pattern": "\\w{2,3}", 
                            "type": "string",
                            "example": "en"
                        },
                        "example": ["en", "de"]
                    },
                    "genre": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "gen", 
                                "lrn", 
                                "ety", 
                                "spe", 
                                "his", 
                                "ort", 
                                "trm"
                            ]
                        },
                        "description": "The genre of the dictionary.\n\n`gen` **General dictionaries** are dictionaries that document contemporary vocabulary and are intended for everyday reference by native and fluent speakers. \n\n `lrn` **Learners' dictionaries** are intended for people who are learning the language as a second language. \n\n`ety` **Etymological dictionaries** are dictionaries that explain the origins of words. \n\n`spe` **Dictionaries on special topics** are dictionaries that focus on a specific subset of the vocabulary (such as new words or phrasal verbs) or which focus on a specific dialect or variant of the language. \n\n`his` **Historical dictionaries** are dictionaries that document previous historical states of the language. \n\n`ort` **Spelling dictionaries** are dictionaries which codify the correct spelling and other aspects of the orthography of words. \n\n `trm` **Terminological dictionaries** describe the vocabulary of specialized domains such as biology, mathematics or economics. \n\n",
                        "example": ["gen"]

                    },
                    "license": {
                        "description": "The license that can be used to republish this data",
                        "pattern": "https?:.*",
                        "example": "https://creativecommons.org/licenses/by/4.0/"
                    },
                    "title": {
                        "description": "The title of the resource",
                        "type": "string",
                        "example": "The Human-Readable Name of This Resource"
                    },
                    "creator": {
                        "description": "The creator of the resource",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/agent"
                        },
                        "example": [{
                            "name": "Institute of This Resource",
                            "email": "contact@institute.com"
                        }]
                    },
                    "publisher": {
                        "description": "The publisher of This Resource",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/agent"
                        },
                        "example": [{
                            "name": "Publishing Company"
                        }]
                    },
	            "abstract": {
                        "description": "A summary of the resource.",
                        "type": "string"
                    },
                    "accrualMethod": {
                        "description": "The method by which items are added to a collection.",
                        "type": "string"
                    },
                    "accrualPeriodicity": {
                        "description": "The frequency with which items are added to a collection.",
                        "type": "string"
                    },
                    "accrualPolicy": {
                        "description": "The policy governing the addition of items to a collection.",
                        "type": "string"
                    },
                    "alternative": {
                        "description": "An alternative name for the resource.",
                        "type": "string"
                    },
                    "audience": {
                        "description": "A class of entity for whom the resource is intended or useful.",
                        "type": "string"
                    },
                    "available": {
                        "description": "Date that the resource became or will become available.",
                        "type": "date"
                    },
                    "bibliographicCitation": {
                        "description": "A bibliographic reference for the resource.",
                        "type": "string"
                    },
                    "conformsTo": {
                        "description": "An established standard to which the described resource conforms.",
                        "type": "string"
                    },
                    "contributor": {
                        "description": "An entity responsible for making contributions to the resource.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/agent"
                        }
                    },
                    "coverage": {
                        "description": "The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.",
                        "type": "string"                    
                    },
                    "created": {
                        "description": "Date of creation of the resource.",
                        "type": "date"
                    },
                    "date": {
                        "description": "A point or period of time associated with an event in the lifecycle of the resource.",
                        "type": "date-time"
                    },
                    "dateAccepted": {
                        "description": "Date of acceptance of the resource.",
                        "type": "date"
                    },
                    "dateCopyrighted": {
                        "description": "Date of copyright.",
                        "type": "date"
                    },
                    "dateSubmitted": {
                        "description": "Date of submission of the resource.",
                        "type": "date"
                    },
                    "description": {
                        "description": "An account of the resource.",
                        "type": "string"
                    },
                    "educationLevel": {
                        "description": "A class of entity, defined in terms of progression through an educational or training context, for which the described resource is intended.",
                        "type": "string"
                    },
                    "extent": {
                        "description": "The size or duration of the resource.",
                        "type": "string"
                    },
                    "hasFormat": {
                        "description": "A related resource that is substantially the same as the pre-existing described resource, but in another format.",
                        "type": "string"
                    },
                    "hasPart": {
                        "description": "A related resource that is included either physically or logically in the described resource.",
                        "type": "string"
                    },
                    "hasVersion": {
                        "description": "A related resource that is a version, edition, or adaptation of the described resource.",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "An unambiguous reference to the resource within a given context.",
                        "type": "string"
                    },
                    "instructionalMethod": {
                        "description": "A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.",
                        "type": "string"
                    },
                    "isFormatOf": {
                        "description": "A related resource that is substantially the same as the described resource, but in another format.",
                        "type": "string"
                    },
                    "isPartOf": {
                        "description": "A related resource in which the described resource is physically or logically included.",
                        "type": "string"
                    },
                    "isReferencedBy": {
                        "description": "A related resource that references, cites, or otherwise points to the described resource.",
                        "type": "string"
                    },
                    "isReplacedBy": {
                        "description": "A related resource that supplants, displaces, or supersedes the described resource.",
                        "type": "string"
                    },
                    "isRequiredBy": {
                        "description": "A related resource that requires the described resource to support its function, delivery, or coherence.",
                        "type": "string"
                    },
                    "issued": {
                        "description": "Date of formal issuance (e.g., publication) of the resource.",
                        "type": "date"
                    },
                    "isVersionOf": {
                        "description": "A related resource of which the described resource is a version, edition, or adaptation.",
                        "type": "string"
                    },
                    "mediator": {
                        "description": "An entity that mediates access to the resource and for whom the resource is intended or useful.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/agent-class"
                        }
                    },
                    "modified": {
                        "description": "Date on which the resource was changed.",
                        "type": "date"
                    },
                    "provenance": {
                        "description": "A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, integrity, and interpretation.",
                        "type": "string"
                    },
                    "references": {
                        "description": "A related resource that is referenced, cited, or otherwise pointed to by the described resource.",
                        "type": "string"
                    },
                    "relation": {
                        "description": "A related resource.",
                        "type": "string"
                    },
                    "replaces": {
                        "description": "A related resource that is supplanted, displaced, or superseded by the described resource.",
                        "type": "string"
                    },
                    "requires": {
                        "description": "A related resource that is required by the described resource to support its function, delivery, or coherence.",
                        "type": "string"
                    },
                    "rights": {
                        "description": "Information about rights held in and over the resource.",
                        "type": "string"
                    },
                    "rightsHolder": {
                        "description": "A person or organization owning or managing rights over the resource.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/agent"
                        }
                    },
                    "source": {
                        "description": "A related resource from which the described resource is derived.",
                        "type": "string"
                    },
                    "spatial": {
                        "description": "Spatial characteristics of the resource.",
                        "type": "string"
                    },
                    "subject": {
                        "description": "The topic of the resource.",
                        "type": "string"
                    },
                    "tableOfContents": {
                        "description": "A list of subunits of the resource.",
                        "type": "string"
                    },
                    "temporal": {
                        "description": "Temporal characteristics of the resource.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The nature or genre of the resource.",
                        "type": "string"
                    },
                    "valid": {
                        "description": "Date of validity of a resource.",
                        "type": "date"
                    }
               },
               "required": ["release","sourceLanguage","targetLanguage","genre","license","title","creator","publisher"]
            },
            "ontolex_entry": {
                "type": "object",
                "properties": {
                    "@context": {
                        "type": "string",
                        "description": "The JSON-LD Context Document, which should be derived from the OntoLex JSON spec"
                    },
                    "@id": {
                        "type": "string",
                        "description": "The identifier of this resource",
                        "example": ""
                    },
                    "@type": {
                        "type": "string",
                        "description": "The type of this entry",
                        "enum": ["LexicalEntry", "Word", "MultiWordExpression", "Affix"]
                    },
                    "canonicalForm": {
                        "type": "object",
                        "description": "The canonical form property relates a lexical entry to its canonical or dictionary form. This usually indicates the \"lemma\" form of a lexical entry.",
                        "properties": {
                            "writtenRep": {
                                "description": "The written representation property indicates the written representation of a form.",
                                "example": "entry"
                            },
                            "phoneticRep": {
                                "description": "The phonetic representation property indicates one phonetic representation of the pronunciation of the form using a scheme such as the International Phonetic Alphabet (IPA)."
                            }
                        }
                    },
                    "partOfSpeech": {
                        "type": "string",
                        "description": "The part of speech of the entry",
                        "enum": [
                            "adjective",
                            "adposition",
                            "adverb",
                            "auxiliary",
                            "coordinatingConjunction",
                            "determiner",
                            "interjection",
                            "commonNoun",
                            "numeral",
                            "particle",
                            "pronoun",
                            "properNoun",
                            "punctuation",
                            "subordinatingConjunction",
                            "symbol",
                            "verb",
                            "other"
                        ]
                    },
                    "otherForm": {
                        "type": "array",
                        "description": "The other form property relates a lexical entry to a non-preferred (\"non-lemma\") form that realizes the given lexical entry.",
                        "items": {
                            "$ref": "#/components/schemas/ontolex_Form"
                        }
                    },
                    "morphologicalPattern": {
                        "type": "string",
                        "description": "The morphological pattern property indicates the morphological class of a word.",
                        "example": "first-declension"
                    },
                    "etymology": {
                        "type": "string",
                        "description": "The etymology of the entry",
                        "example": "From Old English catt"
                    },
                    "senses": {
                        "type": "array",
                        "description": "The sense property relates a lexical entry to one of its lexical senses.",
                        "items": {
                            "$ref": "#/components/schemas/ontolex_LexicalSense"
                        }
                    },
                    "usage": {
                        "type": "string",
                        "description": "The usage property indicates usage conditions or pragmatic implications when using the lexical entry to refer to the given ontological meaning.",
                        "example": { "value": "This is a usage example" }
                    }
                },
                "example": {
                    "@context": "http://lexinfo.net/jsonld/3.0/content.json",
                    "@type": "Word",
                    "language": "en",
                    "partOfSpeech": "commonNoun",
                    "canonicalForm": {
                        "writtenRep": "example"
                    },
                    "senses": [{
                        "definition": "An example OntoLex Entry"
                    }]
                },
                "required": ["@context", "@id", "@type", "canonicalForm", "senses"]

            },
            "ontolex_Form": {
                "type": "object",
                "properties": {
                    "writtenRep": {
                        "description": "The written representation property indicates the written representation of a form.",
                        "example": "entry"
                    },
                    "phoneticRep": {
                        "description": "The phonetic representation property indicates one phonetic representation of the pronunciation of the form using a scheme such as the International Phonetic Alphabet (IPA)."
                    }
                }
            },
            "ontolex_LexicalSense": {
                "type": "object",
                "properties": {
                    "definition": {
                        "type": "string",
                        "description": "The plain text definition of this concept",
                        "example": "This is a concept in an ontology"
                    },
                    "reference": {
                        "type": "string",
                        "description": "The reference property relates a lexical sense to an ontological predicate that represents the denotation of the corresponding lexical entry.",
                        "example": "http://dbpedia.org/resource/Example"
                    }
                }
            }
        },
        "responses": {
            "server_error": {
                "description": "Internal Server Error",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "The error message as plain text",
                                    "example": "Something has gone terribly wrong..."
                                }
                            }
                        }
                    }
                }
            },
            "unauthorized": {
                "description": "Forbidden (API key not specified or not valid)"
            }
        }

    }, 
    "openapi": "3.0.0"
}
